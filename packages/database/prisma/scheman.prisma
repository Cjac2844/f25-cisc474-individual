// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DIRECT_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String
  role      Role     @default(LEARNER)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  courses   Course[] @relation("InstructorCourses")
  assignments Assignment[] @relation("InstructorAssignments")
  submissions Submission[]
  feedback   Feedback[]

  @@map("users")
}

model Course {
  id          String       @id @default(cuid())
  title       String
  description String?
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt

  // Relations
  instructor  User         @relation("InstructorCourses", fields: [instructorId], references: [id])
  instructorId String
  assignments Assignment[]

  @@map("courses")
}

model Assignment {
  id             String         @id @default(cuid())
  title          String
  description    String?
  dueDate        DateTime?
  type           AssignmentType @default(ESSAY)
  isAutoGradable Boolean        @default(false) // For unique "Code Snippet Challenge" feature
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt

  // Relations
  course         Course         @relation(fields: [courseId], references: [id])
  courseId       String
  instructor     User           @relation("InstructorAssignments", fields: [instructorId], references: [id])
  instructorId   String
  submissions    Submission[]

  @@map("assignments")
}

model Submission {
  id        String    @id @default(cuid())
  codeText  String?   // For code snippet submissions
  submittedAt DateTime @default(now())

  // Relations
  assignment   Assignment @relation(fields: [assignmentId], references: [id])
  assignmentId String
  user         User       @relation(fields: [userId], references: [id])
  userId       String
  feedback     Feedback?

  @@map("submissions")
}

model Feedback {
  id        String   @id @default(cuid())
  comment   String?
  grade     Float?   // e.g., 85.5
  createdAt DateTime @default(now())

  // Relations
  submission Submission @relation(fields: [submissionId], references: [id])
  submissionId String   @unique
  instructor   User     @relation(fields: [instructorId], references: [id])
  instructorId String

  @@map("feedback")
}

enum Role {
  LEARNER
  INSTRUCTOR
  ADMIN
}

enum AssignmentType {
  ESSAY
  QUIZ
  CODE_SNIPPET  // Your unique feature: short code challenges with auto-grading potential
}
